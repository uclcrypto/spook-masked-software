# MIT Licence
#
# Copyright 2020 UCLouvain
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

#######################
###### USER SETTINGS
#######################
# 1 for protected implementation
MASKING=1
# Number of shares within the implementation
D=8

########################
###### directories
########################
BOARD_DIR=board_m0/
BOARD_DIR_INV=../
OPENOCD_DIR=/usr/local/share/openocd
BDIR?=build
SRCDIR_SPOOK_MASKED?=embedded_src/spook_masked
SRCDIR_SPOOK_REF?=embedded_src/spook_ref

########################
###### Additional flags
########################
# 1 for ASM implementation, C otherwise
USE_ASM=1
# 1 to turn on PRNG
PRGON=1
# only run for round for encryption and decryption in clyde
# this makes the target non functional but allows to reduce measurement
# time. Does not change the content of the traces.
ROUNDREDUCED=0

########################
###### Compiler Flag
########################
DEBUG=0
OPT=-Os
CC = arm-none-eabi-gcc
AR = arm-none-eabi-ar
CPU=-mcpu=cortex-m0
CFLAGS += -fdata-sections -ffunction-sections -mthumb-interwork -mthumb $(CPU) -fPIC -std=c99
CFLAGS += $(OPT)

########################
###### Compiler Flag
########################
ifeq ($(USE_ASM),1)
    CFLAGS += -DUSE_ASM
endif
ifeq ($(ROUNDREDUCED),1)
    CFLAGS += -DROUNDREDUCED
endif

ifeq ($(MASKING),0)
    D=1
endif


all: libspook

clean:
	make -C $(BOARD_DIR) clean
	rm $(BDIR) -rf
bdir:
	mkdir -p $(BDIR)

.PHONY: clean bdir

##############
#SPOOK MASKED
##############
LIBSPOOK_MASKED= $(BDIR)/libspook_masked.a
objects_spook_masked += prng.o
ifeq ($(MASKING),1)
    objects_spook_masked += clyde_masked.o utils_masking.o
    CFLAGS += -DMASKING -DD=$(D) -DPRGON=$(PRGON) -DINVERSE
    ifeq ($(USE_ASM),1)
    objects_spook_masked += utils_masking_asm.o
    endif
endif

$(BDIR)/%.o: $(SRCDIR_SPOOK_MASKED)/%.c bdir
	$(CC) -c -o $@ $< $(CFLAGS) -I $(SRCDIR_SPOOK_MASKED) -I $(SRCDIR_SPOOK_REF)

$(BDIR)/%.o: $(SRCDIR_SPOOK_MASKED)/%.S bdir
	$(CC) -c -o $@ $< $(CFLAGS) -I $(SRCDIR_SPOOK_MASKED) -I $(SRCDIR_SPOOK_REF)

libspook_masked: $(patsubst %,$(BDIR)/%,$(objects_spook_masked)) bdir
	$(AR) cr $(LIBSPOOK_MASKED) $(patsubst %,$(BDIR)/%,$(objects_spook_masked))
	echo "Done libspook_masked"

##############
#	SPOOK REF
##############
objects_spook_ref := s1p.o encrypt.o primitives.o shadow_32bit.o
ifeq ($(MASKING),0)
    # unprotected clyde is needed if no masking is used
    objects_spook_ref += clyde_32bit.o
endif

$(BDIR)/%.o: $(SRCDIR_SPOOK_REF)/%.c bdir
	$(CC) -c -o $@ $< $(CFLAGS) -I $(SRCDIR_SPOOK_REF)

libspook_ref: $(patsubst %,$(BDIR)/%,$(objects_spook_ref))
	echo "Done libspook_ref lib"

###################
# Complete libspook
###################
LIBSPOOK=$(BDIR)/libspook.a
libspook: libspook_masked libspook_ref
	$(AR) cr $(LIBSPOOK) $(patsubst %,$(BDIR)/%,$(objects_spook_ref)) $(patsubst %,$(BDIR)/%,$(objects_spook_masked))

##############
# board
##############
HEXFILE=board/build/stm32_f0.hex
board: libspook
	@echo "Compiling for board"
	@echo $(C_INCLUDES_EXT)
	make -C $(BOARD_DIR) clean
	make -C $(BOARD_DIR) DEBUG=$(DEBUG) LIBSPOOK=$(BOARD_DIR_INV)/$(LIBSPOOK) D=$(D) MASKING=$(MASKING) USE_ASM=$(USE_ASM) CPU=$(CPU)
	echo "# !!!! Autogenerated in Makefile" > interface/parameters.py
	echo "D = $(D)" >> interface/parameters.py
	echo "PRGON = $(PRGON)" >> interface/parameters.py

burn:
	/usr/local/bin/openocd -f  board_m0/stm32_f0.cfg -c "program board_m0/build/stm32_f0.elf verify reset exit"
##############
# test script
##############
test_board: clean board burn
	python3 tests/test_board.py
